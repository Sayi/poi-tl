package com.deepoove.poi.tl.policy;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.deepoove.poi.XWPFTemplate;
import com.deepoove.poi.data.PictureType;
import com.deepoove.poi.data.Pictures;
import com.deepoove.poi.util.BufferedImageUtils;
import com.deepoove.poi.util.ByteUtils;

@DisplayName("Picture Render test case")
public class PictureRenderTest {

    BufferedImage bufferImage;

    String imageBase64;

    @BeforeEach
    public void init() {
        bufferImage = BufferedImageUtils.newBufferImage(100, 100);
        Graphics2D g = (Graphics2D) bufferImage.getGraphics();
        g.setColor(Color.CYAN);
        g.fillRect(0, 0, 100, 100);
        g.setColor(Color.BLACK);
        g.drawString("Java Image", 0, 50);
        g.dispose();
        bufferImage.flush();

        StringBuilder sb = new StringBuilder();
        sb.append("data:image/png;base64,");
        sb.append(
                "");
        imageBase64 = sb.toString();
    }

    @Test
    public void testPictureRender() throws Exception {
        Map<String, Object> datas = new HashMap<String, Object>();
        // local file path
        datas.put("localPicture", Pictures.ofLocal("src/test/resources/sayi.png").size(120, 120).create());
        // input stream
        datas.put("localBytePicture",
                Pictures.ofStream(new FileInputStream("src/test/resources/logo.png")).size(100, 120).create());
        // network url
        datas.put("urlPicture", Pictures.ofUrl("http://deepoove.com/images/icecream.png").create());
        // java bufferedImage
        datas.put("bufferImagePicture", Pictures.ofBufferedImage(bufferImage, PictureType.PNG).size(100, 100).create());
        // base64
        datas.put("base64Image", Pictures.ofBase64(imageBase64, PictureType.PNG).size(100, 100).center().create());
        // svg
        datas.put("svgPicture", Pictures.ofUrl("https://img.shields.io/badge/jdk-1.6%2B-orange.svg").create());
        // alt attribute for not exist image
        datas.put("image", Pictures.ofLocal("not_exist_image.png").altMeta("No Image!").create());

        XWPFTemplate.compile("src/test/resources/template/render_picture.docx").render(datas)
                .writeToFile("out_render_picture.docx");

    }

    @Test
    public void guessPictureType() throws IOException {
        assertEquals(PictureType.SVG,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.svg"))));
        assertEquals(PictureType.GIF,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.gif"))));
        assertEquals(PictureType.PNG,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.png"))));
        assertEquals(PictureType.JPEG,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.jpg"))));
        assertEquals(PictureType.BMP,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.bmp"))));
        assertEquals(PictureType.TIFF,
                PictureType.suggestFileType(ByteUtils.getLocalByteArray(new File("src/test/resources/picture/p.tif"))));
        assertEquals(PictureType.PNG,
                PictureType.suggestFileType(ByteUtils.getUrlByteArray("http://deepoove.com/images/icecream.png")));
        assertEquals(PictureType.SVG, PictureType
                .suggestFileType(ByteUtils.getUrlByteArray("https://img.shields.io/badge/jdk-1.6%2B-orange.svg")));
    }

}
